class Solution {
public:
    bool isPalindrome(const string& s, int i, int j) {
        while(i < j) {
            if(s[i++] != s[j--]) {
                return false;
            }
        }
        return true;
    }

    bool checkPalindromeFormation(string& a, string& b) {
        int len = a.length();
        int i = 0, j = len - 1;
        // longest common prefix of 'a' matching with suffix of 'b'
        while (i < j && a[i] == b[j]) {
            i++;
            j--;
        }
        if (isPalindrome(a, i, j) || isPalindrome(b, i, j)) {
            return true;
        }
        // Repeat same(b as the first string & a as the second)
        i = 0, j = len - 1;
        while (i < j && b[i] == a[j]) {
            i++;
            j--;
        }
        if (isPalindrome(b, i, j) || isPalindrome(a, i, j)) {
            return true;
        }
        return false;
    }
};